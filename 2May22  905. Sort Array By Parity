class Solution {
public:
    vector<int> sortArrayByParity(vector<int>& nums) {
        int start= 0, end= nums.size()-1, n= end+1;
        while(start<end){
            //keeping start at odd no. and end at even no.
            while(start<n && nums[start]%2 !=1) start++;
            while(end >=0 && nums[end]%2 !=0) end--;
            if(start<end){
                swap(nums[start++], nums[end--]);
            }
            else break;
        }
        return nums;
    }
};
```````````good one````````
class Solution {
public:
    vector<int> sortArrayByParity(vector<int>& nums) {
        int j=0;
        //keeping a pointer at starting to swap the odd one
        for(int i=0; i<nums.size(); i++){
            if(nums[i]%2==0){
                swap(nums[i], nums[j]);
                j++;
            }
        }
        return nums;
    }
};
